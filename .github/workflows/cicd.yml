# github repository actions 페이지에 나타날 이름
name: Artview CI/CD with Gradle

# on : 해당 workflow를 실행시키는 이벤트를 정의
# main 브랜치에 push,pr 이벤트가 발생했을 때 workflow가 실행되도록 정의
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: 🧁 Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 🧁 Gradle Caching - 빌드 시간 향상
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: 🧁 gradle build를 위한 권한을 부여합니다.
        run: chmod +x gradlew

      - name: 🧁 gradle build 중입니다.
        run: ./gradlew build -x test

      # Docker에 로그인, docker image를 빌드하고 Docker Hub로 푸시
      - name: 🧁 docker image build 후 docker hub에 push합니다.
        run: |
        # docker에 로그인
              docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        # 이미지 생성
               docker build -f Dockerfile -t ${{ secrets.DOCKER_REPOSITORY }}/${{ secrets.DOCKER_IMAGE }} .
        # docker hub에 이미지 push
               docker push ${{ secrets.DOCKER_REPOSITORY }}/${{ secrets.DOCKER_IMAGE }}

      # Deploy에서 ssh-action을 이용해 원격으로 EC2에 명령어 입력
      - name: 🧁 docker hub에서 pull 후 deploy합니다.
        uses: appleboy/ssh-action@master
        with:
          username: ubuntu
          host: ${{ secrets.AWS_HOST }} # EC2 퍼블릭 IPv4 DNS
          key: ${{ secrets.AWS_KEY }}
          script: |
          # docker에서 올린 이미지 pull
                    sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}/${{ secrets.DOCKER_IMAGE }}
                    sudo docker rm -f $(docker ps -qa) #
          # 컨테이너를 시작하고, 만약 업데이트된 이미지를 사용하고 있다면 이전 버전의 컨테이너를 중지하고 새 버전으로 교체
                    docker compose up -d
          # docker prune으로 사용하지 않는 도커 오브젝트 정리하여 서버 용량 확보하기
                    docker image prune -f
